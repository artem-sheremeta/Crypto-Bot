"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.menuBank = exports.getListBank = exports.clickBack = exports.clickMenu = exports.clickStart = void 0;
const user_1 = __importDefault(require("./model/user"));
const limit_1 = __importDefault(require("./model/limit"));
const interface_1 = require("./interface");
const takeButtons = (currentKey) => interface_1.menu[currentKey];
const setKey = (value, userContext, chatId) => {
    if (!userContext[chatId]) {
        userContext[chatId] = {};
    }
    userContext[chatId].currentKey = value;
};
function back(currentKey) {
    switch (currentKey) {
        case "menuButton":
            return "mainMenu";
        default:
            return "mainMenu";
    }
}
function clickStart(msg, bot, userContext) {
    return __awaiter(this, void 0, void 0, function* () {
        const username = msg.chat.username;
        if (!username) {
            bot.sendMessage(msg.chat.id, "–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å Telegram –Ω–µ –º–∞—î —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
            return;
        }
        const userExist = yield user_1.default.findOne({ where: { username } });
        const chatId = msg.chat.id;
        const currentKey = "mainMenu";
        setKey(currentKey, userContext, chatId);
        const buttons = takeButtons(currentKey);
        const keyboard = buttons.map((row) => row.map((text) => ({ text })));
        if (!userExist) {
            yield user_1.default.create({
                name: msg.chat.first_name,
                username,
            });
        }
        const message = `–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –Ω–∞—à–æ–º—É –±–æ—Ç—ñ Crypto Stratagems P2P üíº

  –í—ñ–Ω –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑—É—Å–∏–ª–ª—è–º–∏ –Ω–∞—à–æ—ó –Ω–µ–≤–µ–ª–∏–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—ñ üéí
  
  –í –Ω—å–æ–º—É –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Å–≤–æ—ó—Ö –∑–≤ º—è–∑–æ–∫ , –¥–æ–±–∞–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –¥–æ –∫–æ–∂–Ω–æ–≥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –±–∞–Ω–∫—É ( –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è , –≤–∏—Ç—Ä–∞—Ç–∏ , –ª—ñ–º—ñ—Ç , —Ç–æ—â–æ ) —ñ –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—ñ–≤ , –∑–∞–ª–∏—à–∫—É –ª—ñ–º—ñ—Ç—É —É –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å ‚ú®
  
  –î–ª—è –≤–∞—Å –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –º–∞–Ω—É–∞–ª , —Å–∏—Å—Ç–µ–º–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ , –∞ —ñ–∑ –Ω–∞–π–ø—Ä–∏—î–º–Ω—ñ—à–æ–≥–æ –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä - –≤ –Ω—ñ–π –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–∞–∑—ñ–≤ , —Å—É–º—É , —á–∏—Å—Ç–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞ –º—ñ—Å—è—Ü—å , —Ä—ñ–∫ —ñ —Ç–∞–∫ –¥–∞–ª—ñ üè¶
  
  –ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è , –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏ –∫–æ–º–∞–Ω–¥–∞ Crypto Stratagems (https://t.me/cryptostratagems) üìà.`;
        bot.sendMessage(chatId, `${message}`, {
            reply_markup: {
                keyboard,
                resize_keyboard: true,
            },
        });
    });
}
exports.clickStart = clickStart;
function clickMenu(msg, bot, userContext) {
    const chatId = msg.chat.id;
    const currentKey = "menuButton";
    setKey(currentKey, userContext, chatId);
    const buttons = takeButtons(currentKey);
    const keyboard = buttons.map((row) => row.map((text) => ({ text })));
    bot.sendMessage(chatId, "–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é ‚èØ", {
        reply_markup: {
            keyboard,
            resize_keyboard: true,
        },
    });
}
exports.clickMenu = clickMenu;
function clickBack(msg, bot, userContext) {
    const chatId = msg.chat.id;
    const currentKey = back(userContext[chatId].currentKey);
    setKey(currentKey, userContext, chatId);
    const buttons = takeButtons(currentKey);
    const keyboard = buttons.map((row) => row.map((text) => ({ text })));
    userContext[chatId].isSettingLimit = false;
    userContext[chatId].isProfit = false;
    userContext[chatId].isTransactions = false;
    userContext[chatId].isTransfer = false;
    userContext[chatId].isSumBuy = false;
    userContext[chatId].isCourseBuy = false;
    userContext[chatId].isCourseSell = false;
    userContext[chatId].isCommission = false;
    bot.sendMessage(chatId, "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é... ‚¨ÖÔ∏è", {
        reply_markup: {
            keyboard,
            resize_keyboard: true,
        },
    });
}
exports.clickBack = clickBack;
function getListBank(chatId, bot) {
    const keyboardMarkup = {
        inline_keyboard: interface_1.bankMenuKeyboard,
    };
    bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫:", {
        reply_markup: keyboardMarkup,
    });
}
exports.getListBank = getListBank;
function menuBank(chatId, messageId, bot, bankName, userContext, username) {
    return __awaiter(this, void 0, void 0, function* () {
        const bankNames = [
            "monobank",
            "privat",
            "pumb",
            "abank",
            "novapay",
            "sportbank",
        ];
        if (!bankNames.includes(bankName)) {
            bot.sendMessage(chatId, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –±–∞–Ω–∫.");
            return;
        }
        if (!userContext[chatId]) {
            userContext[chatId] = {};
        }
        userContext[chatId].bankName = bankName;
        userContext[chatId].messageId = messageId;
        const keyboardMarkup = {
            inline_keyboard: interface_1.bankOperations,
        };
        const limit = (yield limit_1.default.findOne({
            where: {
                username: username,
                bankName: bankName,
            },
        }));
        const currentBalance = limit ? limit.account_balance : 0;
        const currentLimit = limit ? limit.limit_balance : 0;
        userContext[chatId].currentLimit = currentLimit;
        bot.editMessageText(`–í–∏ –æ–±—Ä–∞–ª–∏ –±–∞–Ω–∫ ${bankName}. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: \n–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: ${currentLimit} –≥—Ä–Ω.\n–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç–∏: ${currentBalance} –≥—Ä–Ω.`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboardMarkup,
        });
    });
}
exports.menuBank = menuBank;
