"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.menuBank = exports.statistics = exports.help = exports.getListBank = exports.clickBack = exports.manual = exports.clickMenu = exports.clickStart = void 0;
const user_1 = require("../models/user");
const limit_1 = require("../models/limit");
const listButtons_1 = require("./listButtons");
const takeButtons = (currentKey) => listButtons_1.menu[currentKey];
const setKey = (value, userContext, chatId) => {
    if (!userContext[chatId]) {
        userContext[chatId] = {};
    }
    userContext[chatId].currentKey = value;
};
function back(currentKey) {
    switch (currentKey) {
        case "menuButton":
            return "mainMenu";
        default:
            return "mainMenu";
    }
}
function clickStart(msg, bot, userContext) {
    return __awaiter(this, void 0, void 0, function* () {
        const username = msg.chat.username;
        if (!username) {
            bot.sendMessage(msg.chat.id, "–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å Telegram –Ω–µ –º–∞—î —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
            return;
        }
        const userExist = yield user_1.User.findOne({ where: { username } });
        const chatId = msg.chat.id;
        const currentKey = "mainMenu";
        setKey(currentKey, userContext, chatId);
        const buttons = takeButtons(currentKey);
        const keyboard = buttons.map((row) => row.map((text) => ({ text })));
        if (!userExist) {
            yield user_1.User.create({
                name: msg.chat.first_name,
                username,
            });
        }
        const message = `–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –Ω–∞—à–æ–º—É –±–æ—Ç—ñ Crypto Stratagems P2P üíº\n
  –í—ñ–Ω –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑—É—Å–∏–ª–ª—è–º–∏ –Ω–∞—à–æ—ó –Ω–µ–≤–µ–ª–∏–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—ñ üéí\n
  –í –Ω—å–æ–º—É –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Å–≤–æ—ó—Ö –∑–≤ º—è–∑–æ–∫ , –¥–æ–±–∞–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –¥–æ –∫–æ–∂–Ω–æ–≥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –±–∞–Ω–∫—É ( –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è , –≤–∏—Ç—Ä–∞—Ç–∏ , –ª—ñ–º—ñ—Ç , —Ç–æ—â–æ ) —ñ –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—ñ–≤ , –∑–∞–ª–∏—à–∫—É –ª—ñ–º—ñ—Ç—É —É –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å ‚ú®\n
  –î–ª—è –≤–∞—Å –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –º–∞–Ω—É–∞–ª , —Å–∏—Å—Ç–µ–º–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ , –∞ —ñ–∑ –Ω–∞–π–ø—Ä–∏—î–º–Ω—ñ—à–æ–≥–æ –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä - –≤ –Ω—ñ–π –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –ª—ñ–º—ñ—Ç–∏ –±–∞–Ω–∫—ñ–≤ üè¶\n
  –ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è , –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏ –∫–æ–º–∞–Ω–¥–∞  <a href="https://t.me/cryptostratagems">Crypto Stratagems</a> üìà.`;
        bot.sendMessage(chatId, `${message}`, {
            parse_mode: "HTML",
            reply_markup: {
                keyboard,
                resize_keyboard: true,
            },
        });
    });
}
exports.clickStart = clickStart;
function clickMenu(msg, bot, userContext) {
    const chatId = msg.chat.id;
    const currentKey = "menuButton";
    setKey(currentKey, userContext, chatId);
    const buttons = takeButtons(currentKey);
    const keyboard = buttons.map((row) => row.map((text) => ({ text })));
    bot.sendMessage(chatId, "–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é ‚èØ", {
        reply_markup: {
            keyboard,
            resize_keyboard: true,
        },
    });
}
exports.clickMenu = clickMenu;
function manual(msg, bot) {
    const chatId = msg.chat.id;
    const message = `–í—Å–µ –ø—Ä–æ—Å—Ç–æ , —Ä–æ–∑–±–µ—Ä–µ—Ç–µ—Å—å –∑ –ª–µ–≥–∫—ñ—Å—Ç—é –∑ <a href="https://t.me/cryptostratagems">Crypto Stratagems</a>`;
    bot.sendMessage(chatId, message, { parse_mode: "HTML" });
}
exports.manual = manual;
function clickBack(msg, bot, userContext) {
    const chatId = msg.chat.id;
    const currentKey = back(userContext[chatId].currentKey);
    setKey(currentKey, userContext, chatId);
    const buttons = takeButtons(currentKey);
    const keyboard = buttons.map((row) => row.map((text) => ({ text })));
    userContext[chatId].isSettingLimit = false;
    userContext[chatId].isDeposit = false;
    userContext[chatId].isTransfer = false;
    userContext[chatId].isSumBuy = false;
    userContext[chatId].isCourseBuy = false;
    userContext[chatId].isCourseSell = false;
    userContext[chatId].isCommission = false;
    bot.sendMessage(chatId, "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é... ‚¨ÖÔ∏è", {
        reply_markup: {
            keyboard,
            resize_keyboard: true,
        },
    });
}
exports.clickBack = clickBack;
function getListBank(msg, bot) {
    const chatId = msg.chat.id;
    const keyboardMarkup = {
        inline_keyboard: listButtons_1.bankMenuKeyboard,
    };
    bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫:", {
        reply_markup: keyboardMarkup,
    });
}
exports.getListBank = getListBank;
function help(msg, bot) {
    const chatId = msg.chat.id;
    const message = `–ù–∞—à—ñ —Ö–µ–ª–ø–µ—Ä–∏ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –Ω–∞–¥–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É —â–æ–¥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É. 

  –ë—É–¥—å –ª–∞—Å–∫–∞, –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ñ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Ç–∞ —á—ñ—Ç–∫–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –∫—Ä–∞—â–µ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏.
  
  –ó–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –¥–æ: <a href="https://t.me/cryptostratagems">CRYPTO STRATAGEMS</a>
  
  ‚ö°Ô∏è‚ö°Ô∏è@kiewermassiv‚ö°Ô∏è‚ö°Ô∏è
  üóΩüóΩ@Djdudhwrb üóΩüóΩ
  
  ‚ÄºÔ∏è –ü—Ä–∞—Ü—é—î–º–æ –∑ 8.00 - 2.00 ‚ÄºÔ∏è`;
    bot.sendMessage(chatId, message, { parse_mode: "HTML" });
}
exports.help = help;
function statistics(msg, bot) {
    const chatId = msg.chat.id;
    const message = `PrivatBank üåù:
  –ù–µ –¥—É–∂–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π –¥–æ –∫—Ä—ñ–ø—Ç–∏, –∑ –∫–æ–º—ñ—Å—ñ—î—é 0.5% (–º–∞–∫—Å–∏–º—É–º 50 UAH). –ù–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –Ω–µ –±—ñ–ª—å—à–µ 100.000‚Ç¥ –Ω–∞ –º—ñ—Å—è—Ü—å. ‚ú®
  
  Monobank üåû:
  –û—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º –ø–æ–∫–∞–∑—É—î —Å–µ–±–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ. –õ—ñ–º—ñ—Ç –Ω–∞ –∫–∞—Ä—Ç–∫—É 400,000‚Ç¥, –∞–ª–µ –¥–æ—Ö—ñ–¥ –∑ P2P –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç—å—Å—è, —Ç—ñ–ª—å–∫–∏ –¥–æ–≤—ñ–¥–∫–∏ –û–ö –∞–±–æ –§–û–ü. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –Ω–µ –±—ñ–ª—å—à–µ 150,000‚Ç¥ –Ω–∞ –º—ñ—Å—è—Ü—å.
  
  Abank üåì:
  –ß—É–¥–æ–≤–∏–π –±–∞–Ω–∫ –∑ –∫–æ–º—ñ—Å—ñ—î—é 0%. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –¥–æ 130.000‚Ç¥ –Ω–∞ –º—ñ—Å—è—Ü—å.
  
  PUMB üî•:
  –ó–æ–ª–æ—Ç–∞ —Å–µ—Ä–µ–¥–∏–Ω–∞ –∑ –∫–æ–º—ñ—Å—ñ—î—é 0%. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –¥–æ 125.000‚Ç¥ –Ω–∞ –º—ñ—Å—è—Ü—å.
  
  Novapay ü§Ø:
  –ü–∏—à—É—Ç—å –ø—Ä–æ –ª—ñ–º—ñ—Ç –¥–æ 400,000‚Ç¥, –∞–ª–µ —Ñ–∞–∫—Ç–∏—á–Ω–æ –¥–æ 100-150+. –ü—Ä–∏ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Ç –±–∞–≥–∞—Ç—å–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –∞ –ø—Ä–∏ –≤—ñ–¥–º–æ–≤—ñ –±–ª–æ–∫—É—é—Ç—å —Ñ—ñ–Ω–∞–Ω—Å–∏ –Ω–∞ 45 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö –¥–Ω—ñ–≤. ü´•
  
  RWSbank üåì: –Ω–µ –¥—É–∂–µ –ø–æ–ø—É–ª—è—Ä–Ω–∏–π –±–∞–Ω–∫ , –∞–ª–µ –¥–∞—î –∑–º–æ–≥—É –∑–∞–≤–æ–¥–∏—Ç–∏ –≤–µ–ª–∏–∫—ñ —Å—É–º–∏ , –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –±–∞–Ω–∫—É –≤ –≤–∏–ø–∞–¥–∫—É —á–æ–≥–æ –º–æ–∂–Ω–∞ –Ω–∞–≤—ñ—Ç—å –Ω–µ —Å–ø–æ–¥—ñ–≤–∞—Ç–∏—Å—å . –¶–µ —â–æ—Å—å —Ç–∏–ø—É –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ª–æ–º–±–∞—Ä–¥—É –±—ñ–ª—è –ñ–î üòÖ. 
  
  –ù–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: 1.000.000‚Ç¥ üî•
  
  –í—Å—ñ —Ü—ñ —Å—É–º–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∞ –º—ñ—Å—è—Ü—å , —è–∫—â–æ –≤–∏ –∑–∞–≤–µ–¥–µ—Ç–µ —ó—Ö –∑–∞ –¥–µ–Ω—å , –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–∞ –Ω–∞–≤—ñ—Ç—å –Ω–µ —Å–ø–æ–¥—ñ–≤–∞—Ç–∏—Å—å üí∂`;
    bot.sendMessage(chatId, message);
}
exports.statistics = statistics;
function menuBank(chatId, messageId, bot, bankName, userContext, username) {
    return __awaiter(this, void 0, void 0, function* () {
        const bankNames = [
            "monobank",
            "privat",
            "pumb",
            "abank",
            "novapay",
            "sportbank",
        ];
        if (!bankNames.includes(bankName)) {
            bot.sendMessage(chatId, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –±–∞–Ω–∫.");
            return;
        }
        if (!userContext[chatId]) {
            userContext[chatId] = {};
        }
        userContext[chatId].bankName = bankName;
        userContext[chatId].messageId = messageId;
        const keyboardMarkup = {
            inline_keyboard: listButtons_1.bankOperations,
        };
        const limit = (yield limit_1.Limit.findOne({
            where: {
                username: username,
                bankName: bankName,
            },
        }));
        const currentBalance = limit ? limit.account_balance : 0;
        const currentLimit = limit ? limit.limit_balance : 0;
        userContext[chatId].currentLimit = currentLimit;
        bot.editMessageText(`–í–∏ –æ–±—Ä–∞–ª–∏ –±–∞–Ω–∫ ${bankName}. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: \n–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: ${currentLimit} –≥—Ä–Ω.\n–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç–∏: ${currentBalance} –≥—Ä–Ω.`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboardMarkup,
        });
    });
}
exports.menuBank = menuBank;
